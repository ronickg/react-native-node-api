import fs from "node:fs";
import path from "node:path";
import cp from "node:child_process";

import { FunctionDecl, getNodeApiFunctions } from "./node-api-functions";

export const CPP_SOURCE_PATH = path.join(__dirname, "../cpp");

// TODO: Remove when all runtime Node API functions are implemented
const IMPLEMENTED_RUNTIME_FUNCTIONS = [
  "napi_create_buffer",
  "napi_create_buffer_copy",
  "napi_is_buffer",
  "napi_get_buffer_info",
  "napi_create_external_buffer",
  "napi_create_async_work",
  "napi_queue_async_work",
  "napi_delete_async_work",
  "napi_cancel_async_work",
  "napi_fatal_error",
  "napi_get_node_version",
  "napi_get_version",
  "napi_async_init",
  "napi_async_destroy",
  "napi_make_callback",
];

/**
 * Generates source code which injects the Node API functions from the host.
 */
export function generateSource(functions: FunctionDecl[]) {
  return `
    // This file is generated by react-native-node-api
    #include <Logger.hpp>
    #include <dlfcn.h>
    #include <weak_node_api.hpp>
    #include <RuntimeNodeApi.hpp>
    #include <RuntimeNodeApiAsync.hpp>
    
    #if defined(__APPLE__)
    #define WEAK_NODE_API_LIBRARY_NAME "@rpath/weak-node-api.framework/weak-node-api"
    #elif defined(__ANDROID__)
    #define WEAK_NODE_API_LIBRARY_NAME "libweak-node-api.so"
    #else
    #error "WEAK_NODE_API_LIBRARY_NAME cannot be defined for this platform"
    #endif

    namespace callstack::nodeapihost {

    void injectIntoWeakNodeApi() {
    void *module = dlopen(WEAK_NODE_API_LIBRARY_NAME, RTLD_NOW | RTLD_LOCAL);
    if (nullptr == module) {
      log_debug("NapiHost: Failed to load weak-node-api: %s", dlerror());
      abort();
    }

    auto inject_weak_node_api_host = (InjectHostFunction)dlsym(
    module, "inject_weak_node_api_host");
    if (nullptr == inject_weak_node_api_host) {
      log_debug("NapiHost: Failed to find 'inject_weak_node_api_host' function: %s", dlerror());
      abort();
    }

    log_debug("Injecting WeakNodeApiHost");
    inject_weak_node_api_host(WeakNodeApiHost {
      ${functions
        .filter(
          ({ kind, name }) =>
            kind === "engine" || IMPLEMENTED_RUNTIME_FUNCTIONS.includes(name)
        )
        .flatMap(({ name }) => `.${name} = ${name},`)
        .join("\n")}
      });
    }
    } // namespace callstack::nodeapihost
  `;
}

async function run() {
  const nodeApiFunctions = getNodeApiFunctions();

  const source = generateSource(nodeApiFunctions);
  const sourcePath = path.join(CPP_SOURCE_PATH, "WeakNodeApiInjector.cpp");
  await fs.promises.writeFile(sourcePath, source, "utf-8");
  cp.spawnSync("clang-format", ["-i", sourcePath], { stdio: "inherit" });
}

run().catch((err) => {
  console.error(err);
  process.exitCode = 1;
});
